/**
 * FALL gate.
 * File name: FALL.hdl
 * Description: Selects between different logic circuits / operations similar to an Arithmetic Logic Unit (ALU).
 * Used in: FSEQ
 *
 * Inputs: A, B, C, D, f0, f1
 * Outputs: E, F, G
 * 
 */

CHIP FALL {
    IN f0, f1, A, B, C, D;
    OUT E, F, G;

    PARTS:

    //// Not Gates
    Not(in=A, out=NotA); // ¬A
    Not(in=B, out=NotB); // ¬B
    Not(in=C, out=NotC); // ¬C
    Not(in=D, out=NotD); // ¬D
    
    //// Import FZero chip
    // Output for F gate
    Not(in=C, out=fzeroF);
    // Output for G gate
    Not(in=D, out=fzeroG);

    //// Import FOne chip
    // Output for F gate
    And(a=A, b=C, out=foneF);
    // Output for G gate
    And(a=B, b=D, out=foneG);
    
    //// Import FTwo chip
    // Output for F gate
    Or(a=A, b=C, out=ftwoF);
    // Output for G gate
    Or(a=B, b=D, out=ftwoG);

    //// Import FThree chip
    /// Output for F gate
    // AC
    And(a=A, b=C, out=AC);
    // BCD
    And(a=B, b=C, out=BC);
    And(a=BC, b=D, out=BCD);
    // ABD
    And(a=A, b=B, out=AB);
    And(a=AB, b=D, out=ABD);
    // Output for E gate
    Or(a=AC, b=BCD, out=ACBCD);
    Or(a=ACBCD, b=ABD, out=ethreeE);

    /// Output for F gate
    // ¬A¬BC
    And(a=NotA, b=NotB, out=¬A¬B);
    And(a=¬A¬B, b=C, out=¬A¬BC);
    // ¬AC¬D
    And(a=NotA, b=C, out=¬AC);
    And(a=¬AC, b=NotD, out=¬AC¬D);
    // A¬B¬C
    And(a=A, b=NotB, out=A¬B);
    And(a=A¬B, b=NotC, out=A¬B¬C);
    // A¬C¬D
    And(a=A, b=NotC, out=A¬C);
    And(a=A¬C, b=NotD, out=A¬C¬D);
    // ¬AB¬CD
    And(a=NotA, b=B, out=¬AB);
    And(a=NotC, b=D, out=¬CD);
    And(a=¬AB, b=¬CD, out=¬AB¬CD);
    // ABCD
    And(a=C, b=D, out=CD);
    And(a=AB, b=CD, out=ABCD);
    // Output for F gate
    Or(a=¬A¬BC, b=¬AC¬D, out=¬A¬BC¬AC¬D);
    Or(a=A¬B¬C, b=A¬C¬D, out=A¬B¬CA¬C¬D);
    Or(a=¬AB¬CD, b=ABCD, out=¬AB¬CDABCD);
    Or(a=¬A¬BC¬AC¬D, b=A¬B¬CA¬C¬D, out=¬A¬BC¬AC¬DA¬B¬CA¬C¬D);
    Or(a=¬A¬BC¬AC¬DA¬B¬CA¬C¬D, b=¬AB¬CDABCD, out=fthreeF);

    /// Output for G gate
    // ¬BD
    And(a=NotB, b=D, out=¬BD);
    // B¬D
    And(a=B, b=NotD, out=B¬D);
    // Output for G gate
    Or(a=¬BD, b=B¬D, out=fthreeG);

    //// Negate Selectors
    Not(in=f0, out=nf0);
    Not(in=f1, out=nf1);

    //// Choosing the Output F
    And(a=foneF, b=nf0, out=foFnf0);
	And(a=fzeroF, b=f0, out=fzFf0);
	Or(a=foFnf0, b=fzFf0, out=choiceF1);

    And(a=fthreeF, b=nf0, out=fthFnf0);
	And(a=ftwoF, b=f0, out=ftFf0);
	Or(a=fthFnf0, b=ftFf0, out=choiceF2);

    And(a=choiceF2, b=nf1, out=ccF2);
	And(a=choiceF1, b=f1, out=ccF1);
	Or(a=ccF2, b=ccF1, out=F);

    //// Choosing the Output G
    And(a=foneG, b=nf0, out=foGnf0);
    And(a=fzeroG, b=f0, out=fzGf0);
    Or(a=foGnf0, b=fzGf0, out=choiceG1);

    And(a=fthreeG, b=nf0, out=fthGnf0);
    And(a=ftwoG, b=f0, out=ftGf0);
    Or(a=fthGnf0, b=ftGf0, out=choiceG2);

    And(a=choiceG2, b=nf1, out=ccG2);
    And(a=choiceG1, b=f1, out=ccG1);
    Or(a=ccG2, b=ccG1, out=G);

    //// Choosing the Output E
    And(a=nf0, b=nf1, out=trueE);
    Not(in=trueE, out=ntrueE);
    
    // DMux(in=ethreeE, sel=trueE, a=a, b=E);
    And(a=ethreeE,b=ntrueE,out=a);
    And(a=ethreeE,b=trueE,out=E);
    
    //Mux(a=trueE, b=ethreeE, sel=trueE, out=E);
    //And(a=trueE, b=ntrueE, out=tEntE);
	//And(a=ethreeE, b=trueE, out=etEtE);
	//Or(a=tEntE, b=etEtE, out=E);
}